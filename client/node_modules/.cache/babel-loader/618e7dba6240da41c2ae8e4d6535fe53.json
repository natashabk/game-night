{"ast":null,"code":"var _jsxFileName = \"/Users/salt/dev/game-night/client/src/utils/WebSocket.js\";\nimport React, { createContext } from 'react';\nimport io from 'socket.io-client';\nimport { WS_BASE } from './config';\nimport { useDispatch } from 'react-redux';\nimport { updateChatLog } from './actions';\nconst WebSocketContext = createContext(null);\nexport { WebSocketContext };\nexport default (({\n  children\n}) => {\n  let socket;\n  let ws;\n  const dispatch = useDispatch();\n\n  const sendMessage = (roomId, message) => {\n    const payload = {\n      roomId: roomId,\n      data: message\n    };\n    socket.emit(\"event://send-message\", JSON.stringify(payload));\n    dispatch(updateChatLog(payload));\n  };\n\n  if (!socket) {\n    socket = io.connect(WS_BASE);\n    socket.on(\"event://get-message\", msg => {\n      const payload = JSON.parse(msg);\n      dispatch(updateChatLog(payload));\n    });\n    ws = {\n      socket: socket,\n      sendMessage\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(WebSocketContext.Provider, {\n    value: ws\n  }, children);\n});","map":{"version":3,"sources":["/Users/salt/dev/game-night/client/src/utils/WebSocket.js"],"names":["React","createContext","io","WS_BASE","useDispatch","updateChatLog","WebSocketContext","children","socket","ws","dispatch","sendMessage","roomId","message","payload","data","emit","JSON","stringify","connect","on","msg","parse"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,MAAMC,gBAAgB,GAAGL,aAAa,CAAE,IAAF,CAAtC;AAEA,SAASK,gBAAT;AAEA,gBAAe,CAAE;AAAEC,EAAAA;AAAF,CAAF,KAAoB;AACjC,MAAIC,MAAJ;AACA,MAAIC,EAAJ;AAEA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AAEA,QAAMO,WAAW,GAAG,CAAEC,MAAF,EAAUC,OAAV,KAAuB;AACzC,UAAMC,OAAO,GAAG;AACdF,MAAAA,MAAM,EAAEA,MADM;AAEdG,MAAAA,IAAI,EAAEF;AAFQ,KAAhB;AAIAL,IAAAA,MAAM,CAACQ,IAAP,CAAa,sBAAb,EAAqCC,IAAI,CAACC,SAAL,CAAgBJ,OAAhB,CAArC;AACAJ,IAAAA,QAAQ,CAAEL,aAAa,CAAES,OAAF,CAAf,CAAR;AACD,GAPD;;AASA,MAAK,CAACN,MAAN,EAAe;AACbA,IAAAA,MAAM,GAAGN,EAAE,CAACiB,OAAH,CAAYhB,OAAZ,CAAT;AAEAK,IAAAA,MAAM,CAACY,EAAP,CAAW,qBAAX,EAAoCC,GAAF,IAAW;AAC3C,YAAMP,OAAO,GAAGG,IAAI,CAACK,KAAL,CAAYD,GAAZ,CAAhB;AACAX,MAAAA,QAAQ,CAAEL,aAAa,CAAES,OAAF,CAAf,CAAR;AACD,KAHD;AAKAL,IAAAA,EAAE,GAAG;AACHD,MAAAA,MAAM,EAAEA,MADL;AAEHG,MAAAA;AAFG,KAAL;AAID;;AAED,sBACE,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEF;AAAlC,KACGF,QADH,CADF;AAKD,CAlCD","sourcesContent":["import React, { createContext } from 'react'\nimport io from 'socket.io-client';\nimport { WS_BASE } from './config';\nimport { useDispatch } from 'react-redux';\nimport { updateChatLog } from './actions';\n\nconst WebSocketContext = createContext( null )\n\nexport { WebSocketContext }\n\nexport default ( { children } ) => {\n  let socket;\n  let ws;\n\n  const dispatch = useDispatch();\n\n  const sendMessage = ( roomId, message ) => {\n    const payload = {\n      roomId: roomId,\n      data: message\n    }\n    socket.emit( \"event://send-message\", JSON.stringify( payload ) );\n    dispatch( updateChatLog( payload ) );\n  }\n\n  if ( !socket ) {\n    socket = io.connect( WS_BASE )\n\n    socket.on( \"event://get-message\", ( msg ) => {\n      const payload = JSON.parse( msg );\n      dispatch( updateChatLog( payload ) );\n    } )\n\n    ws = {\n      socket: socket,\n      sendMessage\n    }\n  }\n\n  return (\n    <WebSocketContext.Provider value={ws}>\n      {children}\n    </WebSocketContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}