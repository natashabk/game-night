{"ast":null,"code":"// actions.js\nimport axios from 'axios';\nimport { API_BASE } from './config'; // These are our action types\n\nexport const CREATE_ROOM_REQUEST = \"CREATE_ROOM_REQUEST\";\nexport const CREATE_ROOM_SUCCESS = \"CREATE_ROOM_SUCCESS\";\nexport const CREATE_ROOM_ERROR = \"CREATE_ROOM_ERROR\"; // Now we define actions\n\nexport function createRoomRequest() {\n  return {\n    type: CREATE_ROOM_REQUEST\n  };\n}\nexport function createRoomSuccess(payload) {\n  return {\n    type: CREATE_ROOM_SUCCESS,\n    payload\n  };\n}\nexport function createRoomError(error) {\n  return {\n    type: CREATE_ROOM_ERROR,\n    error\n  };\n}\nexport function createRoom(roomName) {\n  return async function (dispatch) {\n    dispatch(createRoomRequest());\n\n    try {\n      const response = await axios.get(`${API_BASE}/room?name=${roomName}`);\n      dispatch(createRoomSuccess(response.data));\n    } catch (error) {\n      dispatch(createRoomError(error));\n    }\n  };\n}\nexport const JOIN_ROOM_REQUEST = \"JOIN_ROOM_REQUEST\";\nexport const JOIN_ROOM_SUCCESS = \"JOIN_ROOM_SUCCESS\";\nexport const JOIN_ROOM_ERROR = \"JOIN_ROOM_ERROR\";\nexport function joinRoomRequest() {\n  return {\n    type: JOIN_ROOM_REQUEST\n  };\n}\nexport function joinRoomSuccess(payload) {\n  return {\n    type: JOIN_ROOM_SUCCESS,\n    payload\n  };\n}\nexport function joinRoomError(error) {\n  return {\n    type: JOIN_ROOM_ERROR,\n    error\n  };\n}\nexport function joinRoom(roomId) {\n  return async function (dispatch) {\n    dispatch(joinRoomRequest());\n\n    try {\n      const response = await axios.get(`${API_BASE}/room/${roomId}`);\n      dispatch(joinRoomSuccess(response.data));\n    } catch (error) {\n      dispatch(joinRoomError(error));\n    }\n  };\n}\nexport const SET_USERNAME = \"SET_USERNAME\";\nexport function setUsername(username) {\n  return {\n    type: SET_USERNAME,\n    username\n  };\n}\nexport const SEND_MESSAGE_REQUEST = \"SEND_MESSAGE_REQUEST\";\nexport const UPDATE_CHAT_LOG = \"UPDATE_CHAT_LOG\";\nexport function updateChatLog(update) {\n  return {\n    type: UPDATE_CHAT_LOG,\n    update\n  };\n}","map":{"version":3,"sources":["/Users/salt/dev/game-night/src/utils/actions.js"],"names":["axios","API_BASE","CREATE_ROOM_REQUEST","CREATE_ROOM_SUCCESS","CREATE_ROOM_ERROR","createRoomRequest","type","createRoomSuccess","payload","createRoomError","error","createRoom","roomName","dispatch","response","get","data","JOIN_ROOM_REQUEST","JOIN_ROOM_SUCCESS","JOIN_ROOM_ERROR","joinRoomRequest","joinRoomSuccess","joinRoomError","joinRoom","roomId","SET_USERNAME","setUsername","username","SEND_MESSAGE_REQUEST","UPDATE_CHAT_LOG","updateChatLog","update"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,UAAzB,C,CAEA;;AACA,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B,C,CAGP;;AACA,OAAO,SAASC,iBAAT,GAA6B;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD;AAED,OAAO,SAASK,iBAAT,CAA4BC,OAA5B,EAAsC;AAC3C,SAAO;AACLF,IAAAA,IAAI,EAAEH,mBADD;AAELK,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,eAAT,CAA0BC,KAA1B,EAAkC;AACvC,SAAO;AACLJ,IAAAA,IAAI,EAAEF,iBADD;AAELM,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,UAAT,CAAqBC,QAArB,EAAgC;AACrC,SAAO,gBAAiBC,QAAjB,EAA4B;AACjCA,IAAAA,QAAQ,CAAER,iBAAiB,EAAnB,CAAR;;AACA,QAAI;AACF,YAAMS,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAY,GAAGd,QAAU,cAAcW,QAAU,EAAjD,CAAvB;AACAC,MAAAA,QAAQ,CAAEN,iBAAiB,CAAEO,QAAQ,CAACE,IAAX,CAAnB,CAAR;AACD,KAHD,CAGE,OAAQN,KAAR,EAAgB;AAChBG,MAAAA,QAAQ,CAAEJ,eAAe,CAAEC,KAAF,CAAjB,CAAR;AACD;AACF,GARD;AASD;AAGD,OAAO,MAAMO,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,SAASC,eAAT,GAA2B;AAChC,SAAO;AACLd,IAAAA,IAAI,EAAEW;AADD,GAAP;AAGD;AAED,OAAO,SAASI,eAAT,CAA0Bb,OAA1B,EAAoC;AACzC,SAAO;AACLF,IAAAA,IAAI,EAAEY,iBADD;AAELV,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASc,aAAT,CAAwBZ,KAAxB,EAAgC;AACrC,SAAO;AACLJ,IAAAA,IAAI,EAAEa,eADD;AAELT,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASa,QAAT,CAAmBC,MAAnB,EAA4B;AACjC,SAAO,gBAAiBX,QAAjB,EAA4B;AACjCA,IAAAA,QAAQ,CAAEO,eAAe,EAAjB,CAAR;;AACA,QAAI;AACF,YAAMN,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAY,GAAGd,QAAU,SAASuB,MAAQ,EAA1C,CAAvB;AACAX,MAAAA,QAAQ,CAAEQ,eAAe,CAAEP,QAAQ,CAACE,IAAX,CAAjB,CAAR;AACD,KAHD,CAGE,OAAQN,KAAR,EAAgB;AAChBG,MAAAA,QAAQ,CAAES,aAAa,CAAEZ,KAAF,CAAf,CAAR;AACD;AACF,GARD;AASD;AAED,OAAO,MAAMe,YAAY,GAAG,cAArB;AAEP,OAAO,SAASC,WAAT,CAAsBC,QAAtB,EAAiC;AACtC,SAAO;AACLrB,IAAAA,IAAI,EAAEmB,YADD;AAELE,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,SAASC,aAAT,CAAwBC,MAAxB,EAAiC;AACtC,SAAO;AACLzB,IAAAA,IAAI,EAAEuB,eADD;AAELE,IAAAA;AAFK,GAAP;AAID","sourcesContent":["// actions.js\nimport axios from 'axios';\nimport { API_BASE } from './config';\n\n// These are our action types\nexport const CREATE_ROOM_REQUEST = \"CREATE_ROOM_REQUEST\"\nexport const CREATE_ROOM_SUCCESS = \"CREATE_ROOM_SUCCESS\"\nexport const CREATE_ROOM_ERROR = \"CREATE_ROOM_ERROR\"\n\n\n// Now we define actions\nexport function createRoomRequest() {\n  return {\n    type: CREATE_ROOM_REQUEST\n  }\n}\n\nexport function createRoomSuccess( payload ) {\n  return {\n    type: CREATE_ROOM_SUCCESS,\n    payload\n  }\n}\n\nexport function createRoomError( error ) {\n  return {\n    type: CREATE_ROOM_ERROR,\n    error\n  }\n}\n\nexport function createRoom( roomName ) {\n  return async function ( dispatch ) {\n    dispatch( createRoomRequest() );\n    try {\n      const response = await axios.get( `${ API_BASE }/room?name=${ roomName }` )\n      dispatch( createRoomSuccess( response.data ) );\n    } catch ( error ) {\n      dispatch( createRoomError( error ) );\n    }\n  }\n}\n\n\nexport const JOIN_ROOM_REQUEST = \"JOIN_ROOM_REQUEST\"\nexport const JOIN_ROOM_SUCCESS = \"JOIN_ROOM_SUCCESS\"\nexport const JOIN_ROOM_ERROR = \"JOIN_ROOM_ERROR\"\n\nexport function joinRoomRequest() {\n  return {\n    type: JOIN_ROOM_REQUEST\n  }\n}\n\nexport function joinRoomSuccess( payload ) {\n  return {\n    type: JOIN_ROOM_SUCCESS,\n    payload\n  }\n}\n\nexport function joinRoomError( error ) {\n  return {\n    type: JOIN_ROOM_ERROR,\n    error\n  }\n}\n\nexport function joinRoom( roomId ) {\n  return async function ( dispatch ) {\n    dispatch( joinRoomRequest() );\n    try {\n      const response = await axios.get( `${ API_BASE }/room/${ roomId }` )\n      dispatch( joinRoomSuccess( response.data ) );\n    } catch ( error ) {\n      dispatch( joinRoomError( error ) );\n    }\n  }\n}\n\nexport const SET_USERNAME = \"SET_USERNAME\"\n\nexport function setUsername( username ) {\n  return {\n    type: SET_USERNAME,\n    username\n  }\n}\n\nexport const SEND_MESSAGE_REQUEST = \"SEND_MESSAGE_REQUEST\"\nexport const UPDATE_CHAT_LOG = \"UPDATE_CHAT_LOG\"\n\nexport function updateChatLog( update ) {\n  return {\n    type: UPDATE_CHAT_LOG,\n    update\n  }\n}\n"]},"metadata":{},"sourceType":"module"}