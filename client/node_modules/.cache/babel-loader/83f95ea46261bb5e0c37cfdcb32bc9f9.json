{"ast":null,"code":"// actions.js\nimport axios from 'axios';\nimport { API_BASE } from './config'; // These are our action types\n\nexport const CREATE_ROOM_REQUEST = \"CREATE_ROOM_REQUEST\";\nexport const CREATE_ROOM_SUCCESS = \"CREATE_ROOM_SUCCESS\";\nexport const CREATE_ROOM_ERROR = \"CREATE_ROOM_ERROR\"; // Now we define actions\n\nexport function createRoomRequest() {\n  return {\n    type: CREATE_ROOM_REQUEST\n  };\n}\nexport function createRoomSuccess(payload) {\n  return {\n    type: CREATE_ROOM_SUCCESS,\n    payload\n  };\n}\nexport function createRoomError(error) {\n  return {\n    type: CREATE_ROOM_ERROR,\n    error\n  };\n}\nexport function createRoom(roomName) {\n  return async function (dispatch) {\n    dispatch(createRoomRequest());\n\n    try {\n      const response = await axios.get(`${API_BASE}/room?name=${roomName}`);\n      dispatch(createRoomSuccess(response.data));\n    } catch (error) {\n      dispatch(createRoomError(error));\n    }\n  };\n}\nexport const JOIN_ROOM_REQUEST = \"JOIN_ROOM_REQUEST\";\nexport const JOIN_ROOM_SUCCESS = \"JOIN_ROOM_SUCCESS\";\nexport const JOIN_ROOM_ERROR = \"JOIN_ROOM_ERROR\";\nexport function joinRoomRequest() {\n  return {\n    type: JOIN_ROOM_REQUEST\n  };\n}\nexport function joinRoomSuccess(payload) {\n  return {\n    type: JOIN_ROOM_SUCCESS,\n    payload\n  };\n}\nexport function joinRoomError(error) {\n  return {\n    type: JOIN_ROOM_ERROR,\n    error\n  };\n}\nexport function joinRoom(roomId) {\n  return async function (dispatch) {\n    dispatch(joinRoomRequest());\n\n    try {\n      const response = await axios.get(`${API_BASE}/room/${roomId}`);\n      dispatch(joinRoomSuccess(response.data));\n    } catch (error) {\n      dispatch(joinRoomError(error));\n    }\n  };\n}\nexport const SET_USERNAME = \"SET_USERNAME\";\nexport function setUsername(username) {\n  return {\n    type: SET_USERNAME,\n    username\n  };\n}\nexport const SEND_MESSAGE_REQUEST = \"SEND_MESSAGE_REQUEST\";\nexport const UPDATE_CHAT_LOG = \"UPDATE_CHAT_LOG\";\nexport function updateChatLog(update) {\n  return {\n    type: UPDATE_CHAT_LOG,\n    update\n  };\n}","map":{"version":3,"sources":["/Users/salt/dev/game-night/src/actions.js"],"names":["axios","API_BASE","CREATE_ROOM_REQUEST","CREATE_ROOM_SUCCESS","CREATE_ROOM_ERROR","createRoomRequest","type","createRoomSuccess","payload","createRoomError","error","createRoom","roomName","dispatch","response","get","data","JOIN_ROOM_REQUEST","JOIN_ROOM_SUCCESS","JOIN_ROOM_ERROR","joinRoomRequest","joinRoomSuccess","joinRoomError","joinRoom","roomId","SET_USERNAME","setUsername","username","SEND_MESSAGE_REQUEST","UPDATE_CHAT_LOG","updateChatLog","update"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,UAAzB,C,CAEA;;AACA,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B,C,CAGP;;AACA,OAAO,SAASC,iBAAT,GAA4B;AAC/B,SAAO;AACHC,IAAAA,IAAI,EAAEJ;AADH,GAAP;AAGH;AAED,OAAO,SAASK,iBAAT,CAA2BC,OAA3B,EAAmC;AACtC,SAAO;AACHF,IAAAA,IAAI,EAAEH,mBADH;AAEHK,IAAAA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAA+B;AAClC,SAAO;AACHJ,IAAAA,IAAI,EAAEF,iBADH;AAEHM,IAAAA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AACjC,SAAO,gBAAgBC,QAAhB,EAA0B;AAC7BA,IAAAA,QAAQ,CAACR,iBAAiB,EAAlB,CAAR;;AACA,QAAG;AACC,YAAMS,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAW,GAAEd,QAAS,cAAaW,QAAS,EAA5C,CAAvB;AACAC,MAAAA,QAAQ,CAACN,iBAAiB,CAACO,QAAQ,CAACE,IAAV,CAAlB,CAAR;AACH,KAHD,CAGC,OAAMN,KAAN,EAAY;AACTG,MAAAA,QAAQ,CAACJ,eAAe,CAACC,KAAD,CAAhB,CAAR;AACH;AACJ,GARD;AASH;AAGD,OAAO,MAAMO,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,SAASC,eAAT,GAA0B;AAC7B,SAAO;AACHd,IAAAA,IAAI,EAAEW;AADH,GAAP;AAGH;AAED,OAAO,SAASI,eAAT,CAAyBb,OAAzB,EAAiC;AACpC,SAAO;AACHF,IAAAA,IAAI,EAAEY,iBADH;AAEHV,IAAAA;AAFG,GAAP;AAIH;AAED,OAAO,SAASc,aAAT,CAAuBZ,KAAvB,EAA6B;AAChC,SAAO;AACHJ,IAAAA,IAAI,EAAEa,eADH;AAEHT,IAAAA;AAFG,GAAP;AAIH;AAED,OAAO,SAASa,QAAT,CAAkBC,MAAlB,EAA0B;AAC7B,SAAO,gBAAgBX,QAAhB,EAA0B;AAC7BA,IAAAA,QAAQ,CAACO,eAAe,EAAhB,CAAR;;AACA,QAAG;AACC,YAAMN,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAW,GAAEd,QAAS,SAAQuB,MAAO,EAArC,CAAvB;AACAX,MAAAA,QAAQ,CAACQ,eAAe,CAACP,QAAQ,CAACE,IAAV,CAAhB,CAAR;AACH,KAHD,CAGC,OAAMN,KAAN,EAAY;AACTG,MAAAA,QAAQ,CAACS,aAAa,CAACZ,KAAD,CAAd,CAAR;AACH;AACJ,GARD;AASH;AAED,OAAO,MAAMe,YAAY,GAAG,cAArB;AAEP,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA8B;AACjC,SAAO;AACHrB,IAAAA,IAAI,EAAEmB,YADH;AAEHE,IAAAA;AAFG,GAAP;AAIH;AAED,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA8B;AACjC,SAAO;AACHzB,IAAAA,IAAI,EAAEuB,eADH;AAEHE,IAAAA;AAFG,GAAP;AAIH","sourcesContent":["// actions.js\nimport axios from 'axios';\nimport { API_BASE } from './config';\n\n// These are our action types\nexport const CREATE_ROOM_REQUEST = \"CREATE_ROOM_REQUEST\"\nexport const CREATE_ROOM_SUCCESS = \"CREATE_ROOM_SUCCESS\"\nexport const CREATE_ROOM_ERROR = \"CREATE_ROOM_ERROR\"\n\n\n// Now we define actions\nexport function createRoomRequest(){\n    return {\n        type: CREATE_ROOM_REQUEST\n    }\n}\n\nexport function createRoomSuccess(payload){\n    return {\n        type: CREATE_ROOM_SUCCESS,\n        payload\n    }\n}\n\nexport function createRoomError(error){\n    return {\n        type: CREATE_ROOM_ERROR,\n        error\n    }\n}\n\nexport function createRoom(roomName) {\n    return async function (dispatch) {\n        dispatch(createRoomRequest());\n        try{\n            const response = await axios.get(`${API_BASE}/room?name=${roomName}`)\n            dispatch(createRoomSuccess(response.data));\n        }catch(error){\n            dispatch(createRoomError(error));\n        }\n    }\n}\n\n\nexport const JOIN_ROOM_REQUEST = \"JOIN_ROOM_REQUEST\"\nexport const JOIN_ROOM_SUCCESS = \"JOIN_ROOM_SUCCESS\"\nexport const JOIN_ROOM_ERROR = \"JOIN_ROOM_ERROR\"\n\nexport function joinRoomRequest(){\n    return {\n        type: JOIN_ROOM_REQUEST\n    }\n}\n\nexport function joinRoomSuccess(payload){\n    return {\n        type: JOIN_ROOM_SUCCESS,\n        payload\n    }\n}\n\nexport function joinRoomError(error){\n    return {\n        type: JOIN_ROOM_ERROR,\n        error\n    }\n}\n\nexport function joinRoom(roomId) {\n    return async function (dispatch) {\n        dispatch(joinRoomRequest());\n        try{\n            const response = await axios.get(`${API_BASE}/room/${roomId}`)\n            dispatch(joinRoomSuccess(response.data));\n        }catch(error){\n            dispatch(joinRoomError(error));\n        }\n    }\n}\n\nexport const SET_USERNAME = \"SET_USERNAME\"\n\nexport function setUsername(username){\n    return {\n        type: SET_USERNAME,\n        username\n    }\n}\n\nexport const SEND_MESSAGE_REQUEST = \"SEND_MESSAGE_REQUEST\"\nexport const UPDATE_CHAT_LOG = \"UPDATE_CHAT_LOG\"\n\nexport function updateChatLog(update){\n    return {\n        type: UPDATE_CHAT_LOG,\n        update\n    }\n}\n"]},"metadata":{},"sourceType":"module"}