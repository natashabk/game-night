{"ast":null,"code":"// actions.js\nimport axios from 'axios';\nimport { API_BASE } from './config'; // These are our action types\n\nexport const CREATE_ROOM_REQUEST = \"CREATE_ROOM_REQUEST\";\nexport const CREATE_ROOM_SUCCESS = \"CREATE_ROOM_SUCCESS\";\nexport const CREATE_ROOM_ERROR = \"CREATE_ROOM_ERROR\";\nexport const JOIN_ROOM_REQUEST = \"JOIN_ROOM_REQUEST\";\nexport const JOIN_ROOM_SUCCESS = \"JOIN_ROOM_SUCCESS\";\nexport const JOIN_ROOM_ERROR = \"JOIN_ROOM_ERROR\";\nexport const SET_USERNAME = \"SET_USERNAME\";\nexport const SET_AVATAR = \"SET_AVATAR\";\nexport const SEND_MESSAGE_REQUEST = \"SEND_MESSAGE_REQUEST\";\nexport const UPDATE_CHAT_LOG = \"UPDATE_CHAT_LOG\"; // Now we define actions\n\nconst createRoomRequest = () => ({\n  type: CREATE_ROOM_REQUEST\n});\n\nconst createRoomSuccess = payload => ({\n  type: CREATE_ROOM_SUCCESS,\n  payload\n});\n\nconst createRoomError = error => ({\n  type: CREATE_ROOM_ERROR,\n  error\n});\n\nexport function createRoom(roomName, username, avatar) {\n  return async function (dispatch) {\n    dispatch(createRoomRequest());\n\n    try {\n      const response = await axios.get(`${API_BASE}/newRoom/${roomName}/${username}/${avatar}`);\n      dispatch(createRoomSuccess(response.data));\n    } catch (error) {\n      dispatch(createRoomError(error));\n    }\n  };\n}\n\nconst joinRoomRequest = () => ({\n  type: JOIN_ROOM_REQUEST\n});\n\nconst joinRoomSuccess = payload => ({\n  type: JOIN_ROOM_SUCCESS,\n  payload\n});\n\nconst joinRoomError = error => ({\n  type: JOIN_ROOM_ERROR,\n  error\n});\n\nexport function joinRoom(roomId) {\n  return async function (dispatch) {\n    dispatch(joinRoomRequest());\n\n    try {\n      const response = await axios.get(`${API_BASE}/room/${roomId}`);\n      dispatch(joinRoomSuccess(response.data));\n    } catch (error) {\n      dispatch(joinRoomError(error));\n    }\n  };\n}\nexport const setUsername = username => ({\n  type: SET_USERNAME,\n  username\n});\nexport const setAvatar = avatar => ({\n  type: SET_AVATAR,\n  avatar\n});\nexport const updateChatLog = update => ({\n  type: UPDATE_CHAT_LOG,\n  update\n});","map":{"version":3,"sources":["/Users/salt/dev/game-night/client/src/utils/actions.js"],"names":["axios","API_BASE","CREATE_ROOM_REQUEST","CREATE_ROOM_SUCCESS","CREATE_ROOM_ERROR","JOIN_ROOM_REQUEST","JOIN_ROOM_SUCCESS","JOIN_ROOM_ERROR","SET_USERNAME","SET_AVATAR","SEND_MESSAGE_REQUEST","UPDATE_CHAT_LOG","createRoomRequest","type","createRoomSuccess","payload","createRoomError","error","createRoom","roomName","username","avatar","dispatch","response","get","data","joinRoomRequest","joinRoomSuccess","joinRoomError","joinRoom","roomId","setUsername","setAvatar","updateChatLog","update"],"mappings":"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","sourcesContent":["// actions.js\nimport axios from 'axios';\nimport { API_BASE } from './config';\n\n// These are our action types\nexport const CREATE_ROOM_REQUEST = \"CREATE_ROOM_REQUEST\"\nexport const CREATE_ROOM_SUCCESS = \"CREATE_ROOM_SUCCESS\"\nexport const CREATE_ROOM_ERROR = \"CREATE_ROOM_ERROR\"\nexport const JOIN_ROOM_REQUEST = \"JOIN_ROOM_REQUEST\"\nexport const JOIN_ROOM_SUCCESS = \"JOIN_ROOM_SUCCESS\"\nexport const JOIN_ROOM_ERROR = \"JOIN_ROOM_ERROR\"\nexport const SET_USERNAME = \"SET_USERNAME\"\nexport const SET_AVATAR = \"SET_AVATAR\"\nexport const SEND_MESSAGE_REQUEST = \"SEND_MESSAGE_REQUEST\"\nexport const UPDATE_CHAT_LOG = \"UPDATE_CHAT_LOG\"\n\n// Now we define actions\nconst createRoomRequest = () => ( { type: CREATE_ROOM_REQUEST } )\nconst createRoomSuccess = ( payload ) => ( { type: CREATE_ROOM_SUCCESS, payload } )\nconst createRoomError = ( error ) => ( { type: CREATE_ROOM_ERROR, error } )\n\nexport function createRoom( roomName, username, avatar ) {\n  return async function ( dispatch ) {\n    dispatch( createRoomRequest() );\n    try {\n      const response = await axios.get( `${ API_BASE }/newRoom/${ roomName }/${ username }/${ avatar }` )\n      dispatch( createRoomSuccess( response.data ) );\n    } catch ( error ) {\n      dispatch( createRoomError( error ) );\n    }\n  }\n}\n\nconst joinRoomRequest = () => ( { type: JOIN_ROOM_REQUEST } )\nconst joinRoomSuccess = ( payload ) => ( { type: JOIN_ROOM_SUCCESS, payload } )\nconst joinRoomError = ( error ) => ( { type: JOIN_ROOM_ERROR, error } )\n\nexport function joinRoom( roomId ) {\n  return async function ( dispatch ) {\n    dispatch( joinRoomRequest() );\n    try {\n      const response = await axios.get( `${ API_BASE }/room/${ roomId }` )\n      dispatch( joinRoomSuccess( response.data ) );\n    } catch ( error ) {\n      dispatch( joinRoomError( error ) );\n    }\n  }\n}\n\nexport const setUsername = ( username ) => ( { type: SET_USERNAME, username } )\nexport const setAvatar = ( avatar ) => ( { type: SET_AVATAR, avatar } )\nexport const updateChatLog = ( update ) => ( { type: UPDATE_CHAT_LOG, update } )\n"]},"metadata":{},"sourceType":"module"}