{"ast":null,"code":"var _jsxFileName = \"/Users/salt/dev/game-night/src/Scattergories/Board.js\";\nimport React, { useState } from 'react';\nimport { Table, Input, Typography, Checkbox } from 'antd';\nimport { categories } from './const';\nconst {\n  Text,\n  Title\n} = Typography;\nconst header = {\n  fontWeight: 600,\n  fontSize: 20,\n  color: '#b67d94'\n};\n\nconst Game = ({\n  round,\n  locked\n}) => {\n  const [total, setTotal] = useState(15);\n\n  const handlePointChange = e => {\n    const point = e.target.checked;\n    if (point) setTotal(total + 1);else setTotal(total - 1);\n  };\n\n  const data = categories[round - 1].map(word => ({\n    key: word,\n    category: word\n  }));\n  const columns = [{\n    title: /*#__PURE__*/React.createElement(Text, {\n      style: header\n    }, \"Category\"),\n    dataIndex: 'category',\n    width: 400,\n    align: 'right'\n  }, {\n    title: /*#__PURE__*/React.createElement(Text, {\n      style: { ...header,\n        color: '#65b0d3'\n      }\n    }, \"Answer\"),\n    dataIndex: 'answer',\n    width: 500,\n    render: () => /*#__PURE__*/React.createElement(Input, {\n      allowClear: true,\n      disabled: locked\n    })\n  }, {\n    title: 'Point',\n    dataIndex: 'point',\n    render: () => {\n      return /*#__PURE__*/React.createElement(Checkbox, {\n        disabled: !locked,\n        defaultChecked: true,\n        onChange: handlePointChange\n      });\n    }\n  }];\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: data,\n    pagination: false,\n    bordered: true,\n    style: {\n      maxWidth: 'fit-content'\n    }\n  }), locked ? /*#__PURE__*/React.createElement(Title, {\n    level: 1,\n    style: {\n      color: 'white',\n      textAlign: 'center',\n      maxWidth: 1300\n    }\n  }, \"ROUND TOTAL: \", total) : null);\n};\n\nexport default Game;","map":{"version":3,"sources":["/Users/salt/dev/game-night/src/Scattergories/Board.js"],"names":["React","useState","Table","Input","Typography","Checkbox","categories","Text","Title","header","fontWeight","fontSize","color","Game","round","locked","total","setTotal","handlePointChange","e","point","target","checked","data","map","word","key","category","columns","title","dataIndex","width","align","render","maxWidth","textAlign"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,UAAvB,EAAmCC,QAAnC,QAAmD,MAAnD;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,MAAM;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,IAAkBJ,UAAxB;AAEA,MAAMK,MAAM,GAAG;AAAEC,EAAAA,UAAU,EAAE,GAAd;AAAmBC,EAAAA,QAAQ,EAAE,EAA7B;AAAiCC,EAAAA,KAAK,EAAE;AAAxC,CAAf;;AAEA,MAAMC,IAAI,GAAG,CAAE;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAF,KAAyB;AACpC,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBhB,QAAQ,CAAE,EAAF,CAApC;;AAEA,QAAMiB,iBAAiB,GAAKC,CAAF,IAAS;AACjC,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASC,OAAvB;AACA,QAAKF,KAAL,EAAaH,QAAQ,CAAED,KAAK,GAAG,CAAV,CAAR,CAAb,KACKC,QAAQ,CAAED,KAAK,GAAG,CAAV,CAAR;AACN,GAJD;;AAKA,QAAMO,IAAI,GAAGjB,UAAU,CAAEQ,KAAK,GAAG,CAAV,CAAV,CAAwBU,GAAxB,CAA6BC,IAAI,KAAM;AAAEC,IAAAA,GAAG,EAAED,IAAP;AAAaE,IAAAA,QAAQ,EAAEF;AAAvB,GAAN,CAAjC,CAAb;AACA,QAAMG,OAAO,GAAG,CACd;AACEC,IAAAA,KAAK,eAAE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEpB;AAAb,kBADT;AAEEqB,IAAAA,SAAS,EAAE,UAFb;AAGEC,IAAAA,KAAK,EAAE,GAHT;AAIEC,IAAAA,KAAK,EAAE;AAJT,GADc,EAOd;AACEH,IAAAA,KAAK,eAAE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,EAAE,GAAGpB,MAAL;AAAaG,QAAAA,KAAK,EAAE;AAApB;AAAb,gBADT;AAEEkB,IAAAA,SAAS,EAAE,QAFb;AAGEC,IAAAA,KAAK,EAAE,GAHT;AAIEE,IAAAA,MAAM,EAAE,mBAAM,oBAAC,KAAD;AAAO,MAAA,UAAU,MAAjB;AAAkB,MAAA,QAAQ,EAAElB;AAA5B;AAJhB,GAPc,EAad;AACEc,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,SAAS,EAAE,OAFb;AAGEG,IAAAA,MAAM,EAAE,MAAM;AACZ,0BAAS,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAE,CAAClB,MAArB;AAA6B,QAAA,cAAc,EAAE,IAA7C;AAAmD,QAAA,QAAQ,EAAEG;AAA7D,QAAT;AACD;AALH,GAbc,CAAhB;AAsBA,sBACE,uDACE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAEU,OADX;AAEE,IAAA,UAAU,EAAEL,IAFd;AAGE,IAAA,UAAU,EAAE,KAHd;AAIE,IAAA,QAAQ,EAAE,IAJZ;AAKE,IAAA,KAAK,EAAE;AAAEW,MAAAA,QAAQ,EAAE;AAAZ;AALT,IADF,EAQGnB,MAAM,gBAAG,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE,CAAd;AAAiB,IAAA,KAAK,EAAE;AAAEH,MAAAA,KAAK,EAAE,OAAT;AAAkBuB,MAAAA,SAAS,EAAE,QAA7B;AAAuCD,MAAAA,QAAQ,EAAE;AAAjD;AAAxB,sBAA+FlB,KAA/F,CAAH,GAAmH,IAR5H,CADF;AAYD,CA3CD;;AA8CA,eAAeH,IAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Table, Input, Typography, Checkbox } from 'antd';\nimport { categories } from './const'\nconst { Text, Title } = Typography\n\nconst header = { fontWeight: 600, fontSize: 20, color: '#b67d94', }\n\nconst Game = ( { round, locked } ) => {\n  const [ total, setTotal ] = useState( 15 )\n\n  const handlePointChange = ( e ) => {\n    const point = e.target.checked\n    if ( point ) setTotal( total + 1 )\n    else setTotal( total - 1 )\n  }\n  const data = categories[ round - 1 ].map( word => ( { key: word, category: word } ) )\n  const columns = [\n    {\n      title: <Text style={header}>Category</Text>,\n      dataIndex: 'category',\n      width: 400,\n      align: 'right'\n    },\n    {\n      title: <Text style={{ ...header, color: '#65b0d3' }}>Answer</Text>,\n      dataIndex: 'answer',\n      width: 500,\n      render: () => <Input allowClear disabled={locked} />\n    },\n    {\n      title: 'Point',\n      dataIndex: 'point',\n      render: () => {\n        return ( <Checkbox disabled={!locked} defaultChecked={true} onChange={handlePointChange} /> )\n      }\n    }\n  ];\n\n  return (\n    <>\n      <Table\n        columns={columns}\n        dataSource={data}\n        pagination={false}\n        bordered={true}\n        style={{ maxWidth: 'fit-content' }}\n      />\n      {locked ? <Title level={1} style={{ color: 'white', textAlign: 'center', maxWidth: 1300 }}>ROUND TOTAL: {total}</Title> : null}\n    </>\n  )\n}\n\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}